
import streamlit as st
import pandas as pd

st.set_page_config(page_title="–û–±–ª–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="centered")

PRIMARY_COLOR = "#1F3568"
BG_COLOR = "#F6F2EC"
TEXT_COLOR = "#1F3568"

st.markdown(
    f"""
    <style>
    body {{
        background-color: {BG_COLOR};
        color: {TEXT_COLOR};
        font-family: 'Georgia', serif;
    }}
    h1 {{
        font-size: 32px;
        text-align: center;
        color: {PRIMARY_COLOR};
    }}
    .stDataFrame thead tr th {{
        background-color: {PRIMARY_COLOR};
        color: white;
        font-weight: bold;
        text-align: center;
    }}
    </style>
    """, unsafe_allow_html=True
)

st.image("logo.png", width=120)

st.markdown("<h1>üìä –û–±–ª–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h1>", unsafe_allow_html=True)

st.markdown("""
**–£—Å–ª–æ–≤–∏—è —Ä–∞—Å—á—ë—Ç–∞:**  
- üí∞ –°—É–º–º–∞ –æ–±–ª–∏–≥–∞—Ü–∏–∏: $100,000 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ)  
- üìà –ö—É–ø–æ–Ω –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å—Ä–æ–∫—É (–ù–ö–î)  
- üßæ –ù–∞–ª–æ–≥ 20% –Ω–∞ –∫—É–ø–æ–Ω ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–ª–∞–¥–µ–Ω–∏–∏ 12 –º–µ—Å—è—Ü–µ–≤  
- üîÑ –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ (–∫—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ - –∫—É—Ä—Å –ø–æ–∫—É–ø–∫–∏) –æ–±–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–æ–≥–æ–º 25%  
- üíπ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–æ–¥–æ–≤–∞—è, —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –Ω–∞–ª–æ–≥–æ–≤  
""")

amount_usd = 100000
months = months = st.number_input("–°—Ä–æ–∫ –≤–ª–∞–¥–µ–Ω–∏—è –æ–±–ª–∏–≥–∞—Ü–∏–µ–π (–º–µ—Å.)", min_value=1, max_value=12, value=6, step=1)
initial_exchange_rate = st.number_input("–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏ (‚ÇΩ)", min_value=80.0, max_value=120.0, value=82.5, step=0.5)
exchange_rate = st.number_input("–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏ (‚ÇΩ)", min_value=80.0, max_value=120.0, value=90.0, step=0.5)
coupon_rate = st.number_input("–ö—É–ø–æ–Ω (%)", min_value=1.0, max_value=15.0, value=8.25, step=0.05)

purchase_price_rub = amount_usd * initial_exchange_rate
sale_price_rub = amount_usd * exchange_rate
coupon_usd = amount_usd * (coupon_rate / 100)
nkd_rub = coupon_usd * (months / 12) * exchange_rate
coupon_tax = nkd_rub * 0.20 if months == 12 else 0
currency_profit = (exchange_rate - initial_exchange_rate) * amount_usd
currency_tax = currency_profit * 0.25 if currency_profit > 0 else 0

profit_before_tax = sale_price_rub - purchase_price_rub + nkd_rub
net_profit = profit_before_tax - coupon_tax - currency_tax

annualized_return_before_tax = (profit_before_tax / purchase_price_rub) * (12 / months) * 100
annualized_net_return = (net_profit / purchase_price_rub) * (12 / months) * 100

result_df = pd.DataFrame.from_dict({
    "–°—Ä–æ–∫ –≤–ª–∞–¥–µ–Ω–∏—è (–º–µ—Å.)": [months],
    "–ö—É–ø–æ–Ω (%)": [f"{coupon_rate:.2f}"],
    "–ù–ö–î (‚ÇΩ)": [f"{nkd_rub:.2f}"],
    "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–æ –Ω–∞–ª–æ–≥–æ–≤ (%)": [f"{annualized_return_before_tax:.2f}"],
    "–ß–∏—Å—Ç–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)": [f"{annualized_net_return:.2f}"]
}, orient="index", columns=["–ó–Ω–∞—á–µ–Ω–∏–µ"])

st.markdown("<h4 style='padding-top: 20px;'>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</h4>", unsafe_allow_html=True)
st.dataframe(result_df.style.set_properties(**{
    'text-align': 'center'
}, orient="index", columns=["–ó–Ω–∞—á–µ–Ω–∏–µ"]).set_table_styles([{
    'selector': 'th',
    'props': [('text-align', 'center')]
}]), use_container_width=True)
